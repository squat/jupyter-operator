// Code generated by kubernetes/code-generator. DO NOT EDIT.

/*
Copyright 2018 Lucas Servén Marín

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/squat/jupyter-operator/pkg/apis/jupyter/v1"
	scheme "github.com/squat/jupyter-operator/pkg/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// NotebooksGetter has a method to return a NotebookInterface.
// A group's client should implement this interface.
type NotebooksGetter interface {
	Notebooks(namespace string) NotebookInterface
}

// NotebookInterface has methods to work with Notebook resources.
type NotebookInterface interface {
	Create(*v1.Notebook) (*v1.Notebook, error)
	Update(*v1.Notebook) (*v1.Notebook, error)
	UpdateStatus(*v1.Notebook) (*v1.Notebook, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.Notebook, error)
	List(opts metav1.ListOptions) (*v1.NotebookList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Notebook, err error)
	NotebookExpansion
}

// notebooks implements NotebookInterface
type notebooks struct {
	client rest.Interface
	ns     string
}

// newNotebooks returns a Notebooks
func newNotebooks(c *JupyterV1Client, namespace string) *notebooks {
	return &notebooks{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the notebook, and returns the corresponding notebook object, and an error if there is any.
func (c *notebooks) Get(name string, options metav1.GetOptions) (result *v1.Notebook, err error) {
	result = &v1.Notebook{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("notebooks").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Notebooks that match those selectors.
func (c *notebooks) List(opts metav1.ListOptions) (result *v1.NotebookList, err error) {
	result = &v1.NotebookList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("notebooks").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested notebooks.
func (c *notebooks) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("notebooks").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a notebook and creates it.  Returns the server's representation of the notebook, and an error, if there is any.
func (c *notebooks) Create(notebook *v1.Notebook) (result *v1.Notebook, err error) {
	result = &v1.Notebook{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("notebooks").
		Body(notebook).
		Do().
		Into(result)
	return
}

// Update takes the representation of a notebook and updates it. Returns the server's representation of the notebook, and an error, if there is any.
func (c *notebooks) Update(notebook *v1.Notebook) (result *v1.Notebook, err error) {
	result = &v1.Notebook{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("notebooks").
		Name(notebook.Name).
		Body(notebook).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *notebooks) UpdateStatus(notebook *v1.Notebook) (result *v1.Notebook, err error) {
	result = &v1.Notebook{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("notebooks").
		Name(notebook.Name).
		SubResource("status").
		Body(notebook).
		Do().
		Into(result)
	return
}

// Delete takes name of the notebook and deletes it. Returns an error if one occurs.
func (c *notebooks) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("notebooks").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *notebooks) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("notebooks").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched notebook.
func (c *notebooks) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Notebook, err error) {
	result = &v1.Notebook{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("notebooks").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
