# -*- mode: ruby -*-
# # vi: set ft=ruby :

require 'fileutils'
require 'open-uri'
require 'tempfile'
require 'yaml'

$update_channel = "stable"

Vagrant.require_version ">= 1.6.0"

NODE_IP = "172.17.4.100"
USER_DATA_PATH = File.expand_path("cluster/user-data")
KUBECONFIG_PATH = File.expand_path("cluster/auth/kubeconfig-kubelet")
CA_CERT_PATH = File.expand_path("cluster/tls/ca.crt")
ETCD_CLI_CERT_GLOB = File.expand_path("cluster/tls/etcd-*")
ETCD_CERT_GLOB = File.expand_path("cluster/tls/etcd/*")
GATHER_LOGS_PATH=File.expand_path("../scripts/gatherlogs")

Vagrant.configure("2") do |config|
  # always use Vagrant's insecure key
  config.ssh.insert_key = false

  config.vm.box = "coreos-%s" % $update_channel
  config.vm.box_version = ">= 962.0.0"
  config.vm.box_url = "http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant.json" % $update_channel

  ["vmware_fusion", "vmware_workstation"].each do |vmware|
    config.vm.provider vmware do |v, override|
      v.vmx['numvcpus'] = 1
      v.vmx['memsize'] = 2048
      v.gui = false

      override.vm.box_url = "http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant_vmware_fusion.json" % $update_channel
    end
  end

  config.vm.provider :virtualbox do |v|
    v.cpus = 1
    v.gui = false
    v.memory = 2048

    # On VirtualBox, we don't have guest additions or a functional vboxsf
    # in CoreOS, so tell Vagrant that so it can be smarter.
    v.check_guest_additions = false
    v.functional_vboxsf     = false
  end

  # plugin conflict
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  config.vm.network :private_network, ip: NODE_IP

  config.vm.provision :file, :source => USER_DATA_PATH, :destination => "/tmp/vagrantfile-user-data"
  config.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true

  config.vm.provision :shell, :inline => "mkdir -p /etc/kubernetes", :privileged => true

  config.vm.provision :file, :source => KUBECONFIG_PATH, :destination => "/tmp/kubeconfig"
  config.vm.provision :shell, :inline => "mv /tmp/kubeconfig /etc/kubernetes/kubeconfig", :privileged => true

  config.vm.provision :file, :source => CA_CERT_PATH, :destination => "/tmp/ca.crt"
  config.vm.provision :shell, :inline => "mv /tmp/ca.crt /etc/kubernetes/ca.crt", :privileged => true

  config.vm.provision :shell, :inline => "mkdir -p /etc/etcd/tls", :privileged => true
  Dir.glob(ETCD_CLI_CERT_GLOB) do |etcd_cert_file|
    config.vm.provision :file, :source => etcd_cert_file, :destination => "/tmp/#{File.basename(etcd_cert_file)}"
    config.vm.provision :shell, :inline => "mv /tmp/#{File.basename(etcd_cert_file)} /etc/etcd/tls/", :privileged => true
  end
  config.vm.provision :shell, :inline => "mkdir -p /etc/etcd/tls/etcd", :privileged => true
  Dir.glob(ETCD_CERT_GLOB) do |etcd_cert_file|
    config.vm.provision :file, :source => etcd_cert_file, :destination => "/tmp/#{File.basename(etcd_cert_file)}"
    config.vm.provision :shell, :inline => "mv /tmp/#{File.basename(etcd_cert_file)} /etc/etcd/tls/etcd/", :privileged => true
  end
  config.vm.provision :shell, :inline => "chown -R etcd:etcd /etc/etcd", :privileged => true
  config.vm.provision :shell, :inline => "chmod -R u=rX,g=,o= /etc/etcd", :privileged => true

  config.vm.provision :file, :source => GATHER_LOGS_PATH, :destination => "/tmp/gatherlogs"
end
