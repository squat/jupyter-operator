// Declarative Pipeline (used by `bootkube-e2e-*` jobs)

def bash(String cmd) { sh("#/usr/bin/env bash\nset -euo pipefail\n${cmd}") }

pipeline {
  agent {
    kubernetes {
      cloud 'kubernetes'
      label "${JOB_NAME}-${BUILD_NUMBER}"
      containerTemplate {
        name 'default'
        image 'quay.io/coreos/bootkube-e2e-builder:v0.1'
        ttyEnabled true
        command 'cat'
      }
    }
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    ansiColor('xterm')
    timestamps()
    skipDefaultCheckout(true)
  }
  environment {
    CLUSTER_NAME="${JOB_NAME}-${BUILD_NUMBER}"
    ARTIFACT_DIR="${WORKSPACE}/artifacts"
    REGION = "us-west-2"
    GOPATH = "${WORKSPACE}"
    WORKDIR = "${WORKSPACE}/src/github.com/kubernetes-incubator/bootkube"
    KUBECONFIG = "${WORKSPACE}/src/github.com/kubernetes-incubator/bootkube/hack/quickstart/cluster/auth/kubeconfig"
    IDENT = "${WORKSPACE}/src/github.com/kubernetes-incubator/bootkube/hack/quickstart/cluster/auth/id_rsa"
    BOOTKUBE_OPTS = "--strict"
    TF_VAR_network_provider = "${NETWORK_PROVIDER}"

    AWS_CRED = credentials('aws')
    ACCESS_KEY_ID = "${AWS_CRED_USR}"
    ACCESS_KEY_SECRET = "${AWS_CRED_PSW}"
  }
  stages {
    stage('checkout') {
      steps {
        // jnlp slave runs as "jenkins" user, use the escape hatch. (https://hub.docker.com/r/jenkins/slave/~/dockerfile/)
        bash "chmod -R go+rw /home/jenkins"
        bash "mkdir -p \"${ARTIFACT_DIR}\""
        dir("${WORKDIR}") {
          checkout scm
        }
      }
    }
    stage('build') {
      steps {
        dir("${WORKDIR}") {
          bash "make release |& tee -a ${ARTIFACT_DIR}/build.log"
        }
      }
    }
    stage('deploy') {
      steps {
        dir("${WORKDIR}") {
          bash "./hack/jenkins/scripts/tqs-up.sh |& tee -a ${ARTIFACT_DIR}/deploy.log"
        }
      }
    }
    stage('e2e') {
      steps {
        dir("${WORKDIR}") {
          bash "./hack/jenkins/scripts/e2e.sh |& tee -a ${ARTIFACT_DIR}/e2e.log"
        }
      }
    }
  }
  // Notes about the post/always stage(s):
  // We are breaking the seal and using a script{} block for better management of "stages"
  // and so that additional actions are available. There is "<cmd> || true" used below, so
  // that a script failure doesn't prevent teardown/cleanup/log-upload/etc as much as possible.
  post {
    always {
      script {
        stage('collect-logs') {
          bash "${WORKDIR}/hack/jenkins/scripts/gather-logs.sh || true"
          bash "cp -r ${WORKDIR}/hack/quickstart/logs-** ${ARTIFACT_DIR}/ || true"
        }
        stage('cleanup') {
          bash "(${WORKDIR}/hack/jenkins/scripts/tqs-down.sh || true) |& tee -a ${ARTIFACT_DIR}/cleanup.log"
        }
        stage('archive-logs') {
          dir("${ARTIFACT_DIR}") {
            archiveArtifacts '**/*'
            withAWS(credentials: 'aws', region: "${REGION}") {
              bash "tar -czf /tmp/artifacts.tar.gz ."
              bash "mv /tmp/artifacts.tar.gz \"${ARTIFACT_DIR}/artifacts-${JOB_NAME}-${BUILD_NUMBER}.tar.gz\""
              // note: do not use includepathpattern! https://issues.jenkins-ci.org/browse/JENKINS-47046
              s3Upload(acl: 'PublicRead', bucket: 'bootkube-pr-logs', path: "pr/${JOB_NAME}-${BUILD_NUMBER}/",
                file: "${ARTIFACT_DIR}")
            }
          }
        }
      }
    }
  }
}
